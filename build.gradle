buildscript {
    ext {
        springBootVersion = '2.1.8.RELEASE'
    }
    repositories {
       jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'tech.bison'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}


repositories {
   jcenter()
}


dependencies {
    compile 'org.tuckey:urlrewritefilter:4.0.3'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

bootJar {
    archiveName = "scsstarter.jar"
}

task cleanAngular {
    if(project.hasProperty('withAngular')) {
        project.logger.lifecycle('cleanAngular')
        delete "../client/node_modules/"
    }
}

task buildAngular {
    if(project.hasProperty('withAngular')) {
        project.logger.lifecycle('buildAngular')
        group = BasePlugin.BUILD_GROUP
        if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
            exec {
                workingDir '../client'
                commandLine "npm.cmd", "install"
            }
            exec {
                workingDir '../client'
                commandLine "npm.cmd", "run", "build"
            }
        } else {
            exec {
                workingDir '../client'
                commandLine "npm", "install"
            }
            exec {
                workingDir '../client'
                commandLine "npm", "run", "build"
            }
        }
    }
}

task testAngular {
    if(project.hasProperty('withAngular')) {
        project.logger.lifecycle('testAngular')
        group = BasePlugin.BUILD_GROUP
        if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
            exec {
                workingDir '../client'
                commandLine "npm.cmd", "run", "test"
            }
        } else {
            exec {
                workingDir '../client'
                commandLine "npm", "run", "test"
            }
        }
    }
}
